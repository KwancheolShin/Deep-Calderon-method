# -*- coding: utf-8 -*-
"""Calderon_project1_tri_cucum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rXgH-el0jdmffCTcMbVO655TtMkgA6K9

```
# This is formatted as code
```

# Train the data with initial 8192 data
"""

!git config --global use.email "kcshin3623@gmail.com"
!git config --global user.name "KwancheolShin"
#!mkdir cucumber_project
!cd cucumber_project
!pwd

!git clone https://github.com/KwancheolShin/Deep-Calderon-method.git
!git commit -m "Add Colab project"
!git push origin main

from google.colab import drive
drive.mount('/content/drive')

"""# 새 섹션"""

pip install mat73

import mat73
from scipy.io import loadmat
from skimage.io import imread, imshow
import matplotlib.pyplot as plt
import numpy as np


C=mat73.loadmat('/content/drive/My Drive/Colab Notebooks/phantom_ccm_unif_dist_64_calib.mat');
#print(C)
Recon = mat73.loadmat('/content/drive/My Drive/Colab Notebooks/delta_abs_ccm_1dot3_unif_dist_64_ns01_calib.mat')
#print(Recon)
c_mat_import = C["phantom_tri_cucum_tank_multi_new"]
Recon_import = Recon["delta_abs_scaled_mat_new"]

print(Recon_import.shape)
print(c_mat_import.shape)
print(Recon_import.shape[2])



IMG_WIDTH = 64
IMG_HEIGHT = 64
IMG_CHANNELS = 1

X_Data = np.zeros((Recon_import.shape[2], IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype = float)
Y_Data = np.zeros((c_mat_import.shape[2], IMG_HEIGHT,IMG_WIDTH,IMG_CHANNELS), dtype = float)

iter = range(Recon_import.shape[2])

for n in iter:

  X_Data[n] =Recon_import[:,:,n].real.reshape(IMG_WIDTH,IMG_HEIGHT,1)
  max_x = np.max(X_Data[n])
  min_x = np.min(X_Data[n])
  norm_x = max_x - min_x
  X_Data[n] =( X_Data[n]-min_x)/norm_x


  Y_Data[n] =c_mat_import[:,:,n].real.reshape(IMG_WIDTH,IMG_HEIGHT,1)
  max_y = np.max(Y_Data[n])
  min_y = np.min(Y_Data[n])
  norm_y = max_y - min_y
  Y_Data[n] = (Y_Data[n]-min_y)/norm_y


print(X_Data.shape)
print(Y_Data.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X_Data, Y_Data, test_size = 0.10, random_state = 42)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

import matplotlib.pyplot as plt
import random
# Perform a sanity check on some random training samples
xmx=np.amax(X_train)
xmn=np.amin(X_train)

ymx=np.amax(Y_train)
ymn=np.amin(Y_train)


ix = random.randint(0, len(X_train))
print(ix)
plt.figure(figsize = (12,12))
plt.subplot(221)
plt.imshow(np.squeeze(X_train[ix]),cmap='jet')
plt.colorbar()
plt.subplot(222)
plt.imshow(np.squeeze(Y_train[ix]),cmap='jet')
plt.colorbar()

# plt.subplot(223)
# plt.imshow(np.squeeze(X_train[ix].imag),cmap='jet')
# plt.colorbar()
# plt.subplot(224)
# plt.imshow(np.squeeze(Y_train[ix].imag),cmap='jet')
# plt.colorbar()
# plt.show

from scipy.io import loadmat
from skimage.io import imread, imshow
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import os
import random
from tqdm import tqdm
from skimage.transform import resize
from keras.optimizers import Adam
from tensorflow.keras.callbacks import ReduceLROnPlateau

from tensorflow.keras.preprocessing.image import load_img

from tensorflow.keras.preprocessing.image import img_to_array

seed = 42
np.random.seed = seed

#Build the model
inputs = tf.keras.layers.Input((IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))

#Contraction path
c1 = tf.keras.layers.Conv2D(64, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(inputs)
#c1 = tf.keras.layers.Dropout(0.1)(c1)
c1 = tf.keras.layers.Conv2D(64, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c1)
p1 = tf.keras.layers.MaxPooling2D((2, 2))(c1)

c2 = tf.keras.layers.Conv2D(128, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(p1)
#c2 = tf.keras.layers.Dropout(0.1)(c2)
c2 = tf.keras.layers.Conv2D(128, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c2)
p2 = tf.keras.layers.MaxPooling2D((2, 2))(c2)

c3 = tf.keras.layers.Conv2D(256, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(p2)
#c3 = tf.keras.layers.Dropout(0.2)(c3)
c3 = tf.keras.layers.Conv2D(256, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c3)
p3 = tf.keras.layers.MaxPooling2D((2, 2))(c3)

c4 = tf.keras.layers.Conv2D(512, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(p3)
#c4 = tf.keras.layers.Dropout(0.2)(c4)
c4 = tf.keras.layers.Conv2D(512, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c4)
p4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(c4)

c5 = tf.keras.layers.Conv2D(1024, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p4)# changed (3,3) to (5,5)
#c5 = tf.keras.layers.Dropout(0.3)(c5)
c5 = tf.keras.layers.Conv2D(1024, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c5)

#Expansive path
u6 = tf.keras.layers.Conv2DTranspose(512, (2, 2), strides=(2, 2), padding='same')(c5)
u6 = tf.keras.layers.concatenate([u6, c4])
c6 = tf.keras.layers.Conv2D(512, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(u6)
#c6 = tf.keras.layers.Dropout(0.2)(c6)
c6 = tf.keras.layers.Conv2D(512, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c6)

u7 = tf.keras.layers.Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(c6)
u7 = tf.keras.layers.concatenate([u7, c3])
c7 = tf.keras.layers.Conv2D(256, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(u7)
#c7 = tf.keras.layers.Dropout(0.2)(c7)
c7 = tf.keras.layers.Conv2D(256, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c7)

u8 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c7)
u8 = tf.keras.layers.concatenate([u8, c2])
c8 = tf.keras.layers.Conv2D(128, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(u8)
#c8 = tf.keras.layers.Dropout(0.1)(c8)
c8 = tf.keras.layers.Conv2D(128, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c8)

u9 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c8)
u9 = tf.keras.layers.concatenate([u9, c1], axis=3)
c9 = tf.keras.layers.Conv2D(64, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(u9)
#c9 = tf.keras.layers.Dropout(0.1)(c9)
c9 = tf.keras.layers.Conv2D(64, (5, 5), activation='relu', kernel_initializer='he_normal', padding='same')(c9)

outputs = tf.keras.layers.Conv2D(1, (1, 1), activation='relu')(c9)

model = tf.keras.Model(inputs=[inputs], outputs=[outputs])
model.compile(optimizer=Adam(learning_rate=0.0001), loss='mean_squared_error', metrics=['accuracy'])
model.summary()

#model = tf.keras.models.load_model('Calderon_project1_simulated_tank_NoRot.h5')
################################
#Modelcheckpoint
#checkpointer = tf.keras.callbacks.ModelCheckpoint('Calderon_project1_simulated_ellips.h5', verbose=1, save_best_only=True, save_freq="epoch")
#('name of the model.h5',verbose=1 means we can see something on the screen,  )

#from tensorflow import keras

###########
# new_model = tf.keras.models.load_model('Calderon_project1_copperpipetank.h5')

callbacks = [tf.keras.callbacks.ModelCheckpoint('Cal_ccm_1dot3_unif_dist_64_calib.h5', verbose=1, save_best_only=True, save_freq="epoch"),     tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss'),
        tf.keras.callbacks.TensorBoard(log_dir='logs'), ReduceLROnPlateau(monitor = 'val_loss', factor = 0.5, patience = 3, verbose = 1)]

results = model.fit(X_train, Y_train, validation_split=0.1, batch_size=128, epochs=100,  callbacks=callbacks)

####################################
preds_train = model.predict(X_train, verbose=1)
preds_test = model.predict(X_test, verbose=1)

########## draw results ####################
ix = random.randint(0, len(X_test))
print(ix)

fig = plt.figure(figsize = (18,6))
ax = fig.add_subplot(131)
axp = ax.imshow(np.squeeze(X_test[ix].real),cmap='jet')
ax.set_title('input data')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(132)
axp = ax.imshow(np.squeeze(Y_test[ix].real),cmap='jet')
ax.set_title('Lable')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(133)
axp = ax.imshow(np.squeeze(preds_test[ix].real),cmap='jet')
ax.set_title('output')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

############################
# fig = plt.figure(figsize = (18,6))
# ax = fig.add_subplot(131)
# axp = ax.imshow(np.squeeze(X_test[ix].imag),cmap='jet')
# ax.set_title('input data')
# cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

# ax = fig.add_subplot(132)
# axp = ax.imshow(np.squeeze(Y_test[ix].imag),cmap='jet')
# ax.set_title('Lable')
# cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

# ax = fig.add_subplot(133)
# axp = ax.imshow(np.squeeze(preds_test[ix].imag),cmap='jet')
# ax.set_title('output')
# cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ix = random.randint(0, len(X_test))
print(ix)

fig = plt.figure(figsize = (18,6))
ax = fig.add_subplot(131)
axp = ax.imshow(np.squeeze(X_test[ix].real),cmap='jet')
ax.set_title('input data')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(132)
axp = ax.imshow(np.squeeze(Y_test[ix].real),cmap='jet')
ax.set_title('Lable')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(133)
axp = ax.imshow(np.squeeze(preds_test[ix].real),cmap='jet')
ax.set_title('output')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

import scipy

file_path = 'X_test_abs_ccm_1dot3_unif_dist_64_calib.mat'
scipy.io.savemat(file_path, {'X_test_abs_ccm_1dot3_unif_dist_64_calib': X_test})


file_path = 'Y_test_abs_ccm_1dot3_unif_dist_64_calib.mat'
scipy.io.savemat(file_path, {'Y_test_abs_ccm_1dot3_unif_dist_64_calib': Y_test})


file_path = 'preds_test_abs_ccm_1dot3_unif_dist_64_calib.mat'
scipy.io.savemat(file_path, {'preds_test_abs_ccm_1dot3_unif_dist_64_calib': preds_test})



#######################

file_path = 'X_train_abs_ccm_1dot3_unif_dist_64_calib.mat'
scipy.io.savemat(file_path, {'X_train_abs_ccm_1dot3_unif_dist_64_calib': X_train})


file_path = 'Y_train_copperpipetank.mat'
scipy.io.savemat(file_path, {'Y_train_copperpipetank': Y_train})


file_path = 'preds_train_copperpipetank.mat'
scipy.io.savemat(file_path, {'preds_train_copperpipetank': preds_train})


import os;
print(os.getcwd())

#ccm_abs_load=loadmat('/content/drive/My Drive/Colab Notebooks/recon_diff_ccm_tri_1dot3_64.mat');
ccm_abs_load=loadmat('/content/recon_diff_ccm_tri_1dot3_64.mat');

ccm_abs_load_real = ccm_abs_load["recon_diff"].real
ccm_abs_real = ccm_abs_load_real.reshape((1,IMG_WIDTH,IMG_HEIGHT,1))

maxc = np.max(ccm_abs_real)
minc = np.min(ccm_abs_real)
normc = maxc - minc
print('maxc = ', maxc)
print('minc =', minc)
print('normc=', normc)

ccm_abs_real = (ccm_abs_real-minc)/normc

max_normal = np.max(ccm_abs_real)
min_normal = np.min(ccm_abs_real)
norm_normal = max_normal - min_normal

print('max_normal = ', max_normal)
print('min_normal =', min_normal)
print('norm_normal =', norm_normal)


ccm_abs_pred = model.predict(ccm_abs_real, verbose=1)

maxpred = np.max(ccm_abs_pred)
minpred = np.min(ccm_abs_pred)
normpred = maxpred - minpred

print('maxpred = ', maxpred)
print('minpred =', minpred)
print('normpred=', normpred)

##############################################
fig = plt.figure(figsize = (12,6))
ax = fig.add_subplot(131)
axp = ax.imshow(np.squeeze(ccm_abs_pred),cmap='jet')
ax.set_title('input data')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(132)
axp = ax.imshow(np.squeeze(ccm_abs_pred),cmap='jet')
ax.set_title('output')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(133)
axp = ax.imshow(np.squeeze(ccm_abs_pred),cmap='jet')
ax.set_title('output')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

################################################
import scipy

file_path = 'preds_tank_diff_real_ccm_tri_1dot3_unif_dist_64_calib.mat'
scipy.io.savemat(file_path, {'preds_tank_diff_real_ccm_tri_1dot3_unif_dist_64_calib': ccm_abs_pred})

#ccm_abs_load=loadmat('/content/drive/My Drive/Colab Notebooks/recon_diff_ccm_tri_1dot3_64.mat');
ccm_abs_load=mat73.loadmat('/content/delta_diff_test4.mat');
ccm_abs_load_real = ccm_abs_load["delta_diff_scaled"].real
ccm_abs_load_imag = ccm_abs_load["delta_diff_scaled"].imag
ccm_abs_real = ccm_abs_load_real.reshape((1,IMG_WIDTH,IMG_HEIGHT,1))
ccm_abs_imag = ccm_abs_load_imag.reshape((1,IMG_WIDTH,IMG_HEIGHT,1))


maxc = np.max(ccm_abs_real)
minc = np.min(ccm_abs_real)
normc = maxc - minc

ccm_abs_real = (ccm_abs_real-minc)/normc


maxc = np.max(ccm_abs_imag)
minc = np.min(ccm_abs_imag)
normc = maxc - minc

ccm_abs_imag = (ccm_abs_imag-minc)/normc


pred_ccm_abs_real = model.predict(ccm_abs_real, verbose=1)

pred_ccm_abs_imag = model.predict(ccm_abs_imag, verbose=1)


##############################################
fig = plt.figure(figsize = (8,6))

ax = fig.add_subplot(221)
axp = ax.imshow(np.squeeze(ccm_abs_real),cmap='jet')
ax.set_title('input data')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(222)
axp = ax.imshow(np.squeeze(pred_ccm_abs_real),cmap='jet')
ax.set_title('output')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')


ax = fig.add_subplot(223)
axp = ax.imshow(np.squeeze(ccm_abs_imag),cmap='jet')
ax.set_title('input data')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')

ax = fig.add_subplot(224)
axp = ax.imshow(np.squeeze(pred_ccm_abs_imag),cmap='jet')
ax.set_title('output')
cb = plt.colorbar(axp, ax =[ax], location = 'bottom')


###############################################
import scipy
pred_ccm_diff_real =pred_ccm_abs_real
pred_ccm_diff_imag =pred_ccm_abs_imag


file_path = 'preds_tank_diff_real_ccm_test4.mat'
scipy.io.savemat(file_path, {'preds_tank_diff_real_ccm_test4': pred_ccm_diff_real})

file_path = 'preds_tank_diff_imag_ccm_test4.mat'
scipy.io.savemat(file_path, {'preds_tank_diff_imag_ccm_test4': pred_ccm_diff_imag})

